import Prelude qualified as Haskell

f1 x = if x > 5 then x-1 else x+1

main = do
    print(f1 5)

-- ----------------------------------------------------------------------------------------

f1 :: String -> String
f1 x = if x == "Morteza" then "Welcome, Morteza" else "You aren't Morteza. Bye"

main :: IO()
main = do
    print(f1 "Morteza")

-- ----------------------------------------------------------------------------------------

f1 :: Integer -> Integer -> String
f1 x y = if x > y then "X > Y" else "X < Y"

main :: IO()
main = do
    print(f1 100 200)

-- ----------------------------------------------------------------------------------------

f1 :: Int -> Int -> String
f1 a b = show (a+b)

main :: IO()
main = do 
    print(f1 100 200)

-- ----------------------------------------------------------------------------------------


f1 :: String -> Int
f1 a = read a

main :: IO()
main = do 
    print(f1 "100")

-- ----------------------------------------------------------------------------------------

f1 :: String -> String -> String
f1 a b = a ++ b

main :: IO()
main = do 
    print(f1 "100" "200")

-- ----------------------------------------------------------------------------------------


f1 a b = show a ++ show b

main :: IO()
main = do 
    print(f1 100 200)

-- ----------------------------------------------------------------------------------------

toString a = show a
f1 a b = do
    let g = toString a ++ toString b
    g ++ toString a


main :: IO()
main = do 
    let result = f1 100 "a"
    print(result)

-- ----------------------------------------------------------------------------------------

main :: IO()
main = print (succ 0)

-- ----------------------------------------------------------------------------------------

main :: IO()
main = do
    print(maxBound :: Int)
    print(minBound :: Int)
    print(maxBound :: Char)
    print(minBound :: Char)


-- ----------------------------------------------------------------------------------------

main :: IO()
main = do
    print(4.5 :: Float)
    print(4 :: Float)
    print(4 :: Int)

-- ----------------------------------------------------------------------------------------

data Area = Circle Float Float Float
surface :: Area -> Float
surface (Circle _ _ r) = pi * r ^ 2

main :: IO()
main = print (surface $ Circle 10 20 10)

-- ----------------------------------------------------------------------------------------

data Student = Std String Int String
showStudent :: Student -> String
showStudent (Std name age field) = do
    show name ++ show age ++ show field

main :: IO()
main = print (showStudent $ Std "Morteza" 29 "IT")

-- ----------------------------------------------------------------------------------------

-- ----------------------------------------------------------------------------------------

-- ----------------------------------------------------------------------------------------

-- ----------------------------------------------------------------------------------------

-- ----------------------------------------------------------------------------------------

-- ----------------------------------------------------------------------------------------

-- ----------------------------------------------------------------------------------------

-- ----------------------------------------------------------------------------------------


